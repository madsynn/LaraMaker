  https://waffle.io/madsynn/LaraMaker


  @each('view.name', $jobs, 'job')


├── Commands
│   └── Command.php
├── Console
│   ├── Commands
│   │   └── Inspire.php
│   └── Kernel.php
├── Events
│   └── Event.php
├── Exceptions
│   └── Handler.php
├── Handlers
│   ├── Commands
│   └── Events
├── Http
│   ├── Controllers
│   │   ├── Auth
│   │   │   ├── AuthController.php
│   │   │   └── PasswordController.php
│   │   ├── Controller.php
│   │   ├── HomeController.php
│   │   └── WelcomeController.php
│   ├── Kernel.php
│   ├── Middleware
│   │   ├── Authenticate.php
│   │   ├── RedirectIfAuthenticated.php
│   │   └── VerifyCsrfToken.php
│   ├── Requests
│   │   └── Request.php
│   └── routes.php
├── Providers
│   ├── AppServiceProvider.php
│   ├── BusServiceProvider.php
│   ├── ConfigServiceProvider.php
│   ├── EventServiceProvider.php
│   └── RouteServiceProvider.php
├── Services
│   └── Registrar.php
└── User.php


├── Authenticate.php


├── Controllers

└── Command.php


layout.blade.php
│	└── INCLUDES header.blade.php
│ 		└── INCLUDES menu-cart.blade.php  (this part needs to show the cart products  and is not working)
└── EXTENDS
 	└── index.blade.php
 		├── INCLUDES product-details.blade.php
  		├── INCLUDES product-sidebar.blade.php
 		├── INCLUDES product-features.blade.php
  		├── INCLUDES product-options.blade.php
		└── INCLUDES product-additional.blade.php


├── EXTENDS
│   └── RouteServiceProvider.php
 		├── INCLUDES







































{
    "require": {
        "florianwolters/component-util-observer": "0.1.*"
    }
}

----------------------------------------------
I've created 2 helpers :

if (!function_exists('classActivePath')) {
    function classActivePath($path)
    {
        return Request::is($path) ? ' class="active"' : '';
    }
}

if (!function_exists('classActiveSegment')) {
    function classActiveSegment($segment, $value)
    {
        if(!is_array($value)) {
            return Request::segment($segment) == $value ? ' class="active"' : '';
        }
        foreach ($value as $v) {
            if(Request::segment($segment) == $v) return ' class="active"';
        }
        return '';
    }
}
And I use it as this :

<li {!! classActivePath('medias') !!}>
    <a href="{!! route('medias') !!}"><span class="fa fa-fw fa-file-image-o"></span> {{ trans('back/admin.medias') }}</a>
</li>
<li {!! classActiveSegment(1, 'blog') !!}>
    <a href="#" data-toggle="collapse" data-target="#articlemenu"><span class="fa fa-fw fa-pencil"></span> {{
    ...
</li>

----------------------------------------------

It is more versatile.

if (!function_exists('classActivePath')) {
    function classActivePath($path)
    {
        $path = explode('.', $path);
        $segment = 1;
        foreach($path as $p) {
            if((request()->segment($segment) == $p) == false) {
                return '';
            }
            $segment++;
        }
        return ' active';
    }
}
 <ul>
    <li class="{!! classActivePath('order') !!}">
        <a href="#">Order</a>
        <ul>
            <li class="{!! classActivePath('order.index') !!}">
                <a href="{{ route('order.index') }}"> Orders</a>
            </li>
            <li class="{!! classActivePath('order.index') !!}">
                <a href="{{ route('order.create') }}"> Order Create</a>
            </li>
        </ul>
    </li>
</ul>


----------------------------------------------
if (!function_exists('menuActiveRoute')) {
    function menuActiveRoute($routeName, $includeClass = true, $className = 'active') {
        return preg_match('/^' . preg_quote($routeName, '/') . '/', \Request::route()->getName()) ? ($includeClass ? "class=\"{$className}\"": $className): '';
    }
}
----------------------------------------------

	https://laracasts.com/discuss/channels/general-discussion/best-practice-for-handling-active-menu-item-in-l5


I've seen this package used by a few demos, and and trying it out myself:

https://github.com/laravelista/Ekko

So far, it's working well, but it needs a wildcard or pattern match for the route name, for which I'm working on a PR.

Edit: Ekko now supports wildcard path names and multiple path names. This is absolutely essential for my use-case as some parts of my admin structure are four levels deep (since it models some real-life structures that need to be set up). This allows multiple sub-menus to activate the top-level menu that they are under. The wildcards then support resource-based URLs.

This is my top-level side-menu option for a "show", which lights up when any of about 30 pages under it are being used:

<li class="{{ Ekko::areActiveRoutes(['admin.shows.*', 'admin.shows.groups.*', 'admin.shows.groups.judges.*', 'admin.shows.products.*', 'admin.shows.orders.*']) }}">
    <a href="{{ route('admin.shows.index') }}">Shows</a>
</li>
My aims in choosing this were:

Not to reinvent this common requirement yet again. Yes, the 80% use-case might be quick and simple, but you will quickly hit limitations once your application becomes a little more complex.
Choose an open source package that gets most of the way and offer PRs to improve it to better fit my use-case (for both me and others in future projects).
To minimise PHP in the HTML markup - conditions, ternary operator etc. Just calling a function was the most I wanted to put into the markup.
To match against route names rather than paths. The path stays in routes.php in my applications and ALL other parts of the application just refer to route names. That way paths can be moved and juggled around as the application and its needs grow, without the need to find every instance that references a path.
On that last point, Ekko does support path matches too, so it's there if you want to use it.
















----------------------------------------------
----------------------------------------------
----------------------------------------------

--------------------------------------------------------------------------------------------
----------------------------------------------


	<a href="http://www.facebook.com/share.php?u=http://www.quiltingindustry.com"><img src="http://yourdomain.com/images/facebook_icon.png" border="0" /></a>


	<div id="navbar" class="collapse navbar-collapse">
	<ul class="nav navbar-nav">

	<li {{{ (Request::is('dashboard') ? 'class=active' : '') }}}>
	<a href="{{action('action to see the view')}}">Home</a>
	</li>

	<li {{{ (Request::is('companies') ? 'class=active' : '') }}}>
	<a href="{{action('action to see the view')}}">Companies</a>
	</li>
	</ul>

	</div><!--/.nav-collapse -->


    "php": ">=5.5.9",
        "laravel/framework": "5.1.*",
        "laravelcollective/html": "5.1.*",
        "cartalyst/sentinel": "2.0.*",
        "mcamara/laravel-localization": "1.0.*",
        "barryvdh/laravel-debugbar": "2.2.*",
        "barryvdh/laravel-ide-helper": "^2.1",
        "barryvdh/laravel-dompdf": "0.6.*",
        "davejamesmiller/laravel-breadcrumbs": "3.0.*",
        "sseffa/video-api": "2.0.*",
        "laracasts/flash": "^2.0",
        "rap2hpoutre/laravel-log-viewer": "^0.5.3",
        "cviebrock/eloquent-sluggable": "^3.1",
        "intervention/image": "^2.3",
        "caffeinated/menus": "^2.3",
        "yajra/laravel-datatables-oracle": "~6.0",
        "infyomlabs/laravel-generator": "dev-master",
        "infyomlabs/core-templates": "dev-master",
        "infyomlabs/swagger-generator": "dev-master",
        "jlapp/swaggervel": "dev-master",
        "doctrine/dbal": "^2.5",
        "jeroen-g/laravel-packager": "^1.5",
        "filp/whoops": "^2.1",
        "mpociot/laravel-test-factory-helper": "^0.2.0",
        "webpatser/laravel-uuid": "^2.0",
        "orangehill/iseed": "^2.1",
        "laravelba/laravel-js-routes": "^1.0",
        "patricktalmadge/bootstrapper": "^5.9",
        "maddhatter/laravel-fullcalendar": "~1.0",
        "stripe/stripe-php": "3.*",
        "paypal/rest-api-sdk-php": "*",
        "evercode1/view-maker": "^3.5",
        "beaudierman/ups": "^1.1",
        "nesbot/carbon": "^1.21"

https://laracasts.com/lessons/laravel-5-events
https://github.com/jayaregalinada/common.git
http://packalyst.com/packages/package/pion/laravel-support-controllers
https://github.com/SilvertipSoftware/laravel-trait-pack
https://github.com/molovo/laravel-model-traits.git
"tshafer/laravel-traits":"1.*"
https://github.com/ironsharkde/laravel-extendable
https://github.com/mpociot/laravel-apidoc-generator
https://github.com/winponta/treevel
https://github.com/mpociot/captainhook
https://github.com/mpociot/laravel-test-factory-helper
https://github.com/mpociot/reflection-docblock
https://github.com/mpociot/laravel-firebase-sync
https://github.com/mpociot/laravel-composite-key

https://github.com/mpociot/lavacharts
		https://github.com/mpociot/PHP-CS-Fixer-1
		https://github.com/mpociot/cockpit
https://github.com/tshafer/laravel-traits
https://github.com/mpociot/feature-switch
https://github.com/evercode1/view-maker
https://github.com/evercode1/trait-maker
https://laravel.com/docs/5.0/eloquent#model-observers

class UserObserver {

    public function saving($model)
    {
        //
    }

    public function saved($model)
    {
        //
    }

}
https://github.com/bpocallaghan/titan

https://github.com/bpocallaghan/generators
User::observe(new UserObserver);



$input['log_time'] = Carbon::parse($request->log_time)->format('Y-m-d h:i');


public function updatePortLog(Request $request,$calls, $sub_calls, $id )

 $input['log_time'] = Carbon::parse($request->log_time)->format('Y-m-d h:i');


<a class="buy fa fa-cart-plus fa-2x" href="{{ $product->options->count() ? url('/product/'.$product->id.'-'.Str::slug($product->name).'/show') : url('/cart/add/'.$product->id.'/?qty=1') }}"></a>


 public function updatePortLog(Request $request,$id)
	{
		$subPortLog = SubPortLog::findorFail($id);
		$call = PslCall::findorFail($subPortLog->call_id);
		$subCall = SubCall::findorFail($subPortLog->sub_call_id);

		$validator = Validator::make($request->all(), [
			'description' => ['required'],
			'log_time' => ['required'],
		]);

		$input['description'] = $request->description;
		$input['update_user_id'] = Auth::id();
		$input['log_time'] = Carbon::parse($request->log_time)->format('Y-m-d h:i');
		$subPortLog->update($input);
return response()->json($subPortLog);
	}

scaffolder:cache-clear

		"filp/whoops": "^2.1",
		"intervention/image": "^2.3",
		"intervention/imagecache": "^2.3",
		"jeroen-g/laravel-packager": "^1.5",
		"orangehill/iseed": "^2.2",
		"itsgoingd/clockwork": "^1.12",
		"doctrine/dbal": "^2.5",
		"barryvdh/laravel-ide-helper": "^2.2",
		"barryvdh/laravel-debugbar": "^2.3",
		"roumen/sitemap": "^2.6",
		"cmgmyr/messenger": "^2.13",
		"kalnoy/nestedset": "^4.1"

composer require mpociot/laravel-apidoc-generator
Mpociot\ApiDoc\ApiDocGeneratorServiceProvider::class,

		"intervention/image": "^2.3",
		"intervention/imagecache": "^2.3",
		"jeroen-g/laravel-packager": "^1.5",
		"orangehill/iseed": "^2.2",
		"itsgoingd/clockwork": "^1.12",
		"doctrine/dbal": "^2.5",
		"barryvdh/laravel-ide-helper": "^2.2",
		"barryvdh/laravel-debugbar": "^2.3",
		"roumen/sitemap": "^2.6",
		"cmgmyr/messenger": "^2.13",
		"mpociot/laravel-test-factory-helper": "^0.2.0",
		"kalnoy/nestedset": "^4.1"


composer require barryvdh/laravel-debugbar barryvdh/laravel-ide-helper doctrine/dbal barryvdh/laravel-translation-manager laravel/scout laravel/socialite arcanedev/gravatar arcanedev/currencies roumen/sitemap cmgmyr/messenger kalnoy/nestedset


intervention/image intervention/imagecache jeroen-g/laravel-packager orangehill/iseed itsgoingd/clockwork doctrine/dbal barryvdh/laravel-ide-helper  barryvdh/laravel-debugbar roumen/sitemap cmgmyr/messenger kalnoy/nestedset filp/whoops


Barryvdh\Debugbar\ServiceProvider::class,
Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,
Barryvdh\TranslationManager\ManagerServiceProvider::class,
Laravel\Scout\ScoutServiceProvider::class,
Laravel\Socialite\SocialiteServiceProvider::class,
Cmgmyr\Messenger\MessengerServiceProvider::class,
Arcanedev\LogViewer\LogViewerServiceProvider::class,
Jlapp\SmartSeeder\SmartSeederServiceProvider::class,
Mpociot\Teamwork\TeamworkServiceProvider::class,
Vuer\Notes\NotesServiceProvider::class,
Arcanedev\Gravatar\GravatarServiceProvider::class,
Roumen\Sitemap\SitemapServiceProvider::class,

KyleNoland\EloquentFoundation\Providers\EloquentFoundationServiceProvider::class,

https://bosnadev.com/2014/12/28/laravel-model-observers/

// Zizaco\Entrust\EntrustServiceProvider::class,

Arcanedev\Gravatar\GravatarServiceProvider::class,


Arcanedev\Currencies\CurrenciesServiceProvider::class,

Roumen\Sitemap\SitemapServiceProvider::class,


FIND 301 SITEMAP
LOOK FOR ADMIN CACHE OR SPEEDUP OR AJAX

vendor/bin/php-cs-fixer fix .

.php_cs


'Debugbar' => Barryvdh\Debugbar\Facade::class,
'Socialite' => Laravel\Socialite\Facades\Socialite::class,
'Gravatar' => Arcanedev\Gravatar\Facades\Gravatar::class,

composer require kyle-noland/eloquent-foundation
 composer require vergil-lai/node-categories


 VergilLai\NodeCategories\NodeCategoriesProvider::class



https://github.com/vergil-lai/node-categoires



	$ php artisan node-categories:migration

	 php artisan node-categories:migration --table=mytable

	php artisan make:model Cateory

	 Use artisan creating a model, for example:

	$ php artisan make:model Cateory
	Then, let you use trait model NodeCategoryTrait

	<?php

	namespace App;

	use Illuminate\Database\Eloquent\Model;

	class Category extends Model
	{
		use \VergilLai\NodeCategories\NodeCategoryTrait;
	}
	Add the model viewer

	In /app/Providers/EventServiceProvider.phpthe bootmethod add:

	Category::observe(\VergilLai\NodeCategories\Observer::class);




Example

Create

$parent1 = new Category();
$parent1->name = 'Parent 1';
$parent1->save();

$parent2 = new Category();
$parent2->name = 'Parent 2';
$parent2->save();

$parent3 = new Category();
$parent3->name = 'Parent 3';
$parent3->save();

$parent4 = new Category();
$parent4->name = 'Parent 4';
$parent4->save();

$parent5 = new Category();
$parent5->name = 'Parent 5';
$parent5->save();

$child1 = new Category();
$child1->parent_id = $parent1->id;     //把parent_id字段设置为上级分类的id
$child1->name = 'Child 1';
$child1->save();

$child2 = new Category();
$child2->parent_id = $parent1->id;
$child2->name = 'Child 2';
$child2->save();

$child3 = new Category();
$child3->parent_id = $parent1->id;
$child3->name = 'Child 3';
$child3->save();

$grandchild1 = new Category();
$grandchild1->parent_id = $child1->id;
$grandchild1->name = 'Grandchild 1';
$grandchild1->save();

$grandchild2 = new Category();
$grandchild2->parent_id = $child1->id;
$grandchild2->name = 'Grandchild 2';
$grandchild2->save();
result:

+----+--------+-------+--------------+----------+
| id | parent | level | name         | node     |
+----+--------+-------+--------------+----------+
|  1 |      0 |     1 | Parent 1     | ,1,      |
|  2 |      0 |     1 | Parent 2     | ,2,      |
|  3 |      0 |     1 | Parent 3     | ,3,      |
|  4 |      0 |     1 | Parent 4     | ,4,      |
|  5 |      0 |     1 | Parent 5     | ,5,      |
|  6 |      1 |     2 | Child 1      | ,1,6,    |
|  7 |      1 |     2 | Child 2      | ,1,7,    |
|  8 |      1 |     2 | Child 3      | ,1,8,    |
|  9 |      6 |     3 | Grandchild 1 | ,1,6,9,  |
| 10 |      6 |     3 | Grandchild 2 | ,1,6,10, |
+----+--------+-------+--------------+----------+





Update parent

$child1 = Category::find(6);
$child1->parent_id = 4;        //修改为id为4的子类
$child1->save();
result:




Trait Methods

public \Illuminate\Database\Eloquent\Collection childrens(void)

Get all sub-categories

$parent1 = Category::find(1);
dd($parent1->childrens());
public \Illuminate\Database\Eloquent\Collection getParent(void)

Get headings

$child1 = Category::find(6);
dd($child1->getParent());
You can use BelongTo Relation

$child1 = Category::find(6);
dd($child1->parent);
public \Illuminate\Database\Eloquent\Collection parents(void)

Get all the parent category

public static array getTree(callable $map = null)

public array tree(callable $map = null)

Get tree data structure

$ Map callable processing raw data map method for collection

$tree = Category::getTree(function($item) {
	$item->title = $item->name;
});


class User extends Eloquent
{
	public static function boot()
	{
		parent::boot();

		parent::observe(new UserObserver);
	}
}



Strictly Auto Tags

Strictly AutoTags is a plugin that automatically adds the most relevant tags to posts. Please help me and the plugin by "liking" my Faceboo




https://github.com/RoumenDamianoff/laravel-sitemap/wiki/Dynamic-sitemap

https://github.com/RoumenDamianoff/laravel-sitemap/wiki/Sitemap-index

 Define names of database tables in package config file if you don't want to use default ones:

	'messages_table' => 'messenger_messages',
	'participants_table' => 'messenger_participants',
	'threads_table' => 'messenger_threads',




Add the trait to your user model:

use Cmgmyr\Messenger\Traits\Messagable;

class User extends Model {
	use Messagable;
}


composer require algolia/algoliasearch-client-php



php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"


{{ debug(user, categories) }}

php artisan ide-helper:models Warehouse

 "post-update-cmd": [
		"Illuminate\\Foundation\\ComposerScripts::postUpdate",
		"php artisan ide-helper:generate ",
		"php artisan ide-helper:meta",
		"php artisan optimize"
	]


	php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config

	php artisan ide-helper:generate --sublime

php artisan translations:import
php artisan translations:find

php artisan translations:clean
php artisan translations:reset


//'Illuminate\Translation\TranslationServiceProvider',
'Barryvdh\TranslationManager\TranslationServiceProvider',


	Laravel 5.2, you will have to change the route/middleware setting from the default

	'route' => [
		'prefix' => 'translations',
		'middleware' => 'auth',
	],
to

	'route' => [
		'prefix' => 'translations',
		'middleware' => [
			'web',
			'auth',
		],
	],


use Laravel\Scout\Searchable;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
	use Searchable;

	/**
	 * Get the indexable data array for the model.
	 *
	 * @return array
	 */
	public function toSearchableArray()
	{
		$array = $this->toArray();

		// Customize array...

		return $array;
	}
}

https://github.com/barryvdh/laravel-httpcache
	"barryvdh/laravel-httpcache": "0.2.x@dev"






add_action( 'wp_footer', function() {
	global $wp_filter;
	print '<pre>';
	print_r( $wp_filter['admin_bar_menu'] );
	print '</pre>';
});





	public function index()
	{
		$info = [];
		$info['post_count'] = $this->postRepository->count();
		$info['comment_count'] = $this->commentRepository->count();
		$info['user_count'] = $this->userRepository->count();
		$info['category_count'] = $this->categoryRepository->count();
		$info['tag_count'] = $this->tagRepository->count();
		$info['page_count'] = $this->pageRepository->count();
		$info['image_count'] = $this->imageRepository->count();

		return view('admin.index', compact('info'));
	}




$this->comment('==================================================');
$this->comment(' ');
$this->comment('        | NEW CRUD PACKAGE CONTAINING |');
$this->comment(' ');
$this->comment('==================================================');
$this->comment(' ');
$this->comment('=============================================================================');
$this->comment('         IF YOU ADDED A ENUM FIELD YOU NEED OT ADD OPTIONS TO IT  ');
$this->comment('         BEFORE YOU MIGRATE TEH NEW TABLES TO THE DATABASE. OTHERWISE ');
$this->comment('         SIMPLY SELECT YES.  ');
$this->comment(' ');
$this->comment(' ');
	if ($this->confirm("\nDo you want to migrate database? [y|N]", false)) {
	  $this->call('migrate');
	}
$this->comment(' ');
$this->comment('=============================================================================');
